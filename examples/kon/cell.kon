
{for ([let j 0 ] [< % j 4 ] {set j [+ % j 1 ]})
  #[
    {if [> % j 2 ]
      #[
        {break}
      ]
    }
    [writeln % "    j : " j ]
  ]
}

{func n (x y)
  #[
    [* % x y ]
  ]
}


{cond
  [< % 5 4 ]
  #[
    "condition 1 pass"
  ]
  [< % a 4 ]
  #[
    [writeln % "condition 2 pass" ]
  ]
  [< % 3 4 ]
  #[
    [writeln % "condition 3 pass" ]
    [writeln % "do something more here" ]
  ]
  else
  #[
    "else branch"
  ]
}


{kon
  :a
  :b =1
  :c
  :b = 2
  (1 :a 2 :b "zxc" :a 3)
  #[
    {5 $a $[]  }
    #(:a 1 @%.[#(:b 2)]) `` should use php-like array
    >=
    {sh "ps" "-h" $[123] }
  ]
  ass :t :f = 2 (1 df)
  #[
    ff
  ]
  aass :a :b = 3
  #[
    ``1
  ]
^kon}

{for ([let j 0 ] [< % j 4 ] {set j [+ % j 1 ]})
  #[
    {if [> % j 2 ]
      #[
        {break}
      ]
    }
    [writeln % "    j : " j ]
  ]
}

{func n (x y)
  #[
    [* % x y ]
  ]
}


{cond
  [< % 5 4 ]
  #[
    "condition 1 pass"
  ]
  [< % a 4 ]
  #[
    [writeln % "condition 2 pass" ]
  ]
  [< % 3 4 ]
  #[
    [writeln % "condition 3 pass" ]
    [writeln % "do something more here" ]
  ]
  else
  #[
    "else branch"
  ]
}


{kon
  :a
  :b =1
  :c
  :b = 2
  (1 :a 2 :b "zxc" :a 3)
  #[
    {5 $a $[]  }
    #(:a 1 @%.[#(:b 2)]) `` should use php-like array
    >=
    {sh "ps" "-h" $[123] }
  ]
  ass :t :f = 2 (1 df)
  #[
    ff
  ]
  aass :a :b = 3
  #[
    ``1
  ]
^kon}



{kn/accessor/put-key-val % new-instance "__proto" #nil; #[] }
{kon #[] }